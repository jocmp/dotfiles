#!/usr/bin/env ruby

#
# Copied from
# https://gitlab.com/EvanHahn/dotfiles/-/raw/ece393e625bb8254fe05774df33bb5af8a73d7e7/home/bin/bin/murder
# with a less violent name
#

SIGNALS = [
  [15, 3],
  [2, 3],
  [1, 4],
  [9, 0]
]

def i?(arg)
  arg.to_i != 0
end

def running?(pid)
  `ps -p #{pid}`.lines.length == 2
end

def go_ahead?
  %w[y yes].include?($stdin.gets.strip.downcase)
end

def kill(pid, code)
  `kill -#{code} #{pid}`
end

def nix_pid(pid)
  SIGNALS.each do |signal|
    break unless running?(pid)

    code, wait = signal

    kill(pid, code)
    sleep 0.5
    sleep(wait) if running?(pid)
  end
end

def nix_names(name)
  running = `ps -eo 'pid command' | grep -Fiw '#{name}' | grep -Fv grep`
  running.lines.each do |line|
    pid, fullname = line.split(nil, 2)

    next if Process.pid == pid.to_i

    print "nix #{fullname.chomp} (pid #{pid})? "
    nix_pid(pid) if go_ahead?
  end
end

def nix_port(arg)
  lsofs = `lsof -i #{arg}`
  lsofs.lines.drop(1).each do |line|
    pid = line.split(nil, 3)[1]

    fullname = `ps -eo 'command' #{pid}`.lines.drop(1).first

    print "nix #{fullname.chomp} (pid #{pid})? "
    nix_pid(pid) if go_ahead?
  end
end

def main(arg)
  is_pid = i?(arg)
  is_port = arg[0] == ":" && i?(arg.slice(1, arg.size))

  if is_pid
    nix_pid(arg)
  elsif is_port
    nix_port(arg)
  else
    nix_names(arg)
  end
end

if ARGV.size < 1
  puts <<~USAGE
    usage:
    nx 123    # kill by pid
    nx ruby   # kill by process name
    nx :3000  # kill by port
  USAGE

  exit 1
else
  main(ARGV[0])
end
